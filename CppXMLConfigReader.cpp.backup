#include "CppXMLConfigReader.h"

using namespace std;

// Constructor.
CppXMLConfigReader::CppXMLConfigReader(const string& configFileName, const string& applicationSettingsName, const string& rootSectionName)
{
	m_XMLConfigManager.reset(new XMLConfig(configFileName, applicationSettingsName, rootSectionName));
}

// Initialize the config reader here.
void CppXMLConfigReader::init()
{
	try
	{
		m_XMLConfigManager->readConfigFile();
	}
	catch(const runtime_error& error)
	{
		cout << "Failed to initialize the XMLConfigManager. The error is = " << error.what() << endl;	
	}

	if(m_XMLConfigManager->isConfigValid())
	{
		m_configMapItems = m_XMLConfigManager->getConfigMap();	
	}
}

// Valid status of the config.
bool CppXMLConfigReader::isConfigValid()
{
	return(m_XMLConfigManager->isConfigValid());	
}

map<string, string> CppXMLConfigReader::getConfigMap()
{
	return(m_configMapItems);
}

// Implement a generic templated function for the retreival of values rather than seperate types having almost same code. Write the seperate types as a wrapper around the main template function.
template<typename T> T CppXMLConfigReader::getTypeVal(const std::string& key, const T& defaultVal) const
{
	T returnVal = defaultVal;
	auto iter = m_configMapItems.find(key.c_str());
	if(iter != m_configMapItems.end())
	{
		try
		{
			if(is_same<T,int>::value)
				returnVal = stoi(iter->second);
			if(is_same<T,float>::value)
				returnVal = stof(iter->second);
			if(is_same<T,long>::value)
				returnVal = stol(iter->second);
			if(is_same<T,double>::value)
				returnVal = stod(iter->second);
			if(is_same<T,bool>::value)
			{
				if(iter->second == "true" || iter->second == "1")
					returnVal=true;
				else
					returnVal=false;
			}
		
			/* this does not work , check on stackoverflow. */
			//	if(is_same<T,string>::value)
			//	returnVal = iter->second;
		}
		catch(const invalid_argument& e)
		{
			cout << "Exception happened while converting " << iter->second << " Into rqequired type. Please investigate." << endl;
		}
	}
	return(returnVal);
}

template<> string CppXMLConfigReader::getTypeVal(const std::string& key, const std::string& defaultVal) const
{
	string returnVal = defaultVal;
	auto iter = m_configMapItems.find(key.c_str());
    if(iter != m_configMapItems.end())
    {
		returnVal=iter->second;
	}
	return(returnVal);
}

// All the specific config type returners implemented here.
int CppXMLConfigReader::getIntValue(const string& key, const int& defaultVal) const
{
	int returnVal = getTypeVal<int>(key, defaultVal);
	return(returnVal);
}

long CppXMLConfigReader::getLongValue(const string& key, const long& defaultVal) const
{
	long returnVal = getTypeVal<long>(key, defaultVal);
	return(returnVal);
}

float CppXMLConfigReader::getFloatValue(const string& key, const float& defaultVal) const
{
	float returnVal = getTypeVal<float>(key, defaultVal);
	return(returnVal);
}

double CppXMLConfigReader::getDoubleValue(const string& key, const double& defaultVal) const
{
	double returnVal = getTypeVal<double>(key, defaultVal);
	return(returnVal);
}

bool CppXMLConfigReader::getBoolValue(const string& key, const bool& defaultVal) const
{
	bool returnVal = getTypeVal<bool>(key, defaultVal);
	return(returnVal);
}

string CppXMLConfigReader::getStringValue(const string& key, const string& defaultVal) const
{
	string returnVal = getTypeVal<string>(key, defaultVal);
	return(returnVal);
}

